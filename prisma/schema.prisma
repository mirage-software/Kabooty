// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  discordId     String        @id
  username      String
  discriminator String?
  avatar        String?
  joinedAt      DateTime?
  lastUpdated   DateTime?
  roles         UserRole[]
  osu           Osu?
  collabs       Collab[]
  picks         Pick[]
  participated  Participant[]
  creation_date DateTime?
  verified      Boolean       @default(false)
  logs          Log[]
  assets        Asset[]
  bumps         Bump[]
}

model UserRole {
  user          User        @relation(fields: [userDiscordId], references: [discordId], onDelete: Cascade)
  role          DiscordRole @relation(fields: [discordRoleId], references: [id], onDelete: Cascade)
  userDiscordId String
  discordRoleId String

  @@unique([userDiscordId, discordRoleId])
}

model DiscordRole {
  id      String     @id
  name    String
  display Boolean    @default(false)
  roles   UserRole[]
}

model Osu {
  id            String    @id @unique
  user          User      @relation(fields: [discordId], references: [discordId], onDelete: Cascade)
  discordId     String    @unique
  username      String
  country       String
  avatar        String
  restricted    Boolean   @default(false)
  access_token  String?
  refresh_token String?
  expires_at    DateTime?
  creation_date DateTime?
  modes         OsuMode[]
}

model OsuMode {
  id            String    @id @default(cuid())
  osu           Osu       @relation(fields: [osuId], references: [id], onDelete: Cascade)
  osuId         String
  gamemode      String
  rank          Int?
  countryRank   Int?
  level         Int?
  pp            Float?
  rankedScore   String?
  hitAccuracy   Decimal?
  playCount     Int?
  playTime      Int?
  lastRefreshed DateTime?
  selected      Boolean

  @@unique([osuId, gamemode])
}

model Collab {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  title        String
  topic        String
  url          String?       @unique
  logo         String?
  creator      User          @relation(fields: [creatorId], references: [discordId], onDelete: Cascade)
  creatorId    String
  rules        String?
  type         CollabType
  status       CollabStatus
  bumpStatus   BumpStatus    @default(DISABLED)
  allowEditing Boolean       @default(false)
  picks        Pick[]
  participants Participant[]
  collabAssets CollabAsset[]
  assets       Asset[]
}

model CollabAsset {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  collab      Collab   @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId    String
  assetType   String
  assetName   String
  assetWidth  Int
  assetHeight Int
  mainAsset   Boolean  @default(false)
  example     Boolean  @default(false)
  exampleX    Int?
  exampleY    Int?
  assets      Asset[]
}

enum CollabType {
  OPEN
  LIMITED
  PRIVATE
}

enum CollabStatus {
  DESIGN
  EARLY_ACCESS
  OPEN
  RELEASE
  CLOSED
}

enum BumpStatus {
  ENABLED
  DISABLED
}

model Pick {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  name         String
  image        String?
  extra        Json?
  characterId  Int?
  character    AnimeCharacter? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  collab       Collab          @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId     String
  original     Boolean         @default(false)
  user         User?           @relation(fields: [userId], references: [discordId])
  userId       String
  participants Participant[]
  assets       Asset[]
  valid        Boolean         @default(false)
  bumps        Bump[]

  @@unique([collabId, characterId])
}

model Asset {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  image         String
  collab        Collab      @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId      String
  user          User?       @relation(fields: [userId], references: [discordId])
  userId        String
  pick          Pick        @relation(fields: [pickId], references: [id], onDelete: Cascade)
  pickId        String
  collabAsset   CollabAsset @relation(fields: [collabAssetId], references: [id], onDelete: Cascade)
  collabAssetId String
  valid         Boolean     @default(false)

  @@unique([pickId, collabAssetId])
}

model Participant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [discordId])
  userId    String
  collab    Collab   @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId  String
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  pickId    String
}

model AnimeCharacter {
  id         Int    @id @default(autoincrement())
  name       String
  anime_name String

  picks Pick[]

  @@index([name])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  action    String
  user      User?    @relation(fields: [userId], references: [discordId])
  userId    String
  data      Json?
}

enum BumpState {
  OPEN
  MISSED
  CLOSED
}

model Bump {
  id        String    @id @default(cuid())
  createdAt DateTime
  state     BumpState @default(OPEN)
  pick      Pick      @relation(fields: [pickId], references: [id], onDelete: Cascade)
  pickId    String
  user      User      @relation(fields: [userId], references: [discordId], onDelete: Cascade)
  userId    String

  @@index([createdAt])
}
